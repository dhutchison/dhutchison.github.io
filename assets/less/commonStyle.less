/* Common style information between print and screen */


// Media query values ************************/
//Reference: http://stephen.io/mediaqueries/
@mq-iPhone5: ~"only screen and (min-device-width : 320px) and (max-device-width : 568px) ";
@mq-iPhone5Landscape: ~"@{mq-iPhone5} and (orientation : landscape) ";
@mq-iPhone5Portrait: ~"@{mq-iPhone5} and (orientation : portrait) ";
 
@mq-iPhone234: ~"only screen and (min-device-width : 320px) and (max-device-width : 480px) ";
@mq-iPhone234Landscape: ~"@{mq-iPhone234} and (orientation : landscape) ";
@mq-iPhone234Portrait: ~"@{mq-iPhone234} and (orientation : portrait) ";
 
//@mq-iPhone: ~"@{mq-iPhone5}, @{mq-iPhone234}";
//@mq-iPhoneSized: ~"only screen and (min-width: 320px) and (max-width: 568px), only screen and (min-width: 320px) and (max-width : 480px)";
@mq-iPhone: ~"only screen and (max-device-width: 640px), only screen and (max-device-width: 568px), only screen and (max-device-width: 540px), only screen and (max-device-width: 320px)";
@mq-iPhoneSized: ~"only screen and (max-width: 640px), only screen and (max-width: 568px), only screen and (max-width: 540px), only screen and (max-width: 320px)";
 
@mq-iPad: ~"only screen and (min-device-width : 768px) and (max-device-width : 1024px) ";
@mq-iPadSized: ~"only screen and (min-width : 768px) and (max-width : 1024px) ";

@mq-iPadLandscape: ~"@{mq-iPad} and (orientation : landscape) ";
@mq-iPadPortrait: ~"@{mq-iPad} and (orientation : portrait) ";
//Retina add rule and (-webkit-min-device-pixel-ratio: 2)
//Non-Retina add rule and (-webkit-min-device-pixel-ratio: 1)

/*
 * Variables 
 */
@backgroundBlue: #5D83C4;
@dividerColour: #5D83C4;

@headerBackgroundDarkBlue: #212E45; 
@headerFontColour: #DDDDDD;
@headerLinkHoverColour: @backgroundBlue;

@mainHeaderColour: #475261;
@mainFontColour: #333333;
@outerBackgroundColour: #666666;
@shadowColour: #333333;
@backgroundColour: #FFFFFF;

@mainHeaderLeftGradient: #5D83C4;

@headerHeight: 6em;

@lineHeightEM: 1.5em;
/* Need to use the below when multiplying */
@lineHeight: 1.5;

@linkColour: @mainFontColour;
//@linkHoverColour: #8A230F;
@linkHoverColour: @dividerColour;


@titleFonts: 'League Gothic', 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
@titleFontWeight: normal;
@headerFonts: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
@headerFontWeight: 700;
@contentFonts: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
@contentFontWeight: 300;

@categoryTagColour: #E82C0C;
@tagColour: #0089e0;

@fontSizeTitle: 6em;
@fontSizeTitleMobile: 5em;
@fontSizeStandard: 18px;
@fontSizeSmaller: 16px;
@fontSizeSmallest: 14px;

@fontSizeTitlePrint: 32pt;
@fontSizeLargePrint: 16pt;
@fontSizeStandardPrint: 12pt;

@widthStandard: 60%;
@widthSmaller: 80%;
@widthSmallest: 100%;

@verticalSpacing: 1em;
@horizontalSpacing: 2em;


/* Common Mixins */
.reset() {
    * {
    	margin: 0;
    	padding: 0;
    }
}



.fonts() {
    /* Font Definitions */
    @import url(http://fonts.googleapis.com/css?family=Open+Sans:300,700);
}

.iPhoneMQ(@rules) {
    @media @mq-iPhone, @mq-iPhoneSized { @rules(); }
}

.iPadMQ(@rules) {
    @media @mq-iPadPortrait, @mq-iPadSized { @rules(); }
}

.iPadPortraitMQ(@rules) {
    @media @mq-iPadPortrait { @rules(); }
}

//Function just for doing mobile sizing. If number and no unit, remsize. otherwise use supplied value
.mobileSize(@property; @sizeValue; @iPadSizeValue: @sizeValue; @iPhoneSizeValue: @sizeValue) {
    
    .remSizeStandard(@property; @sizeValue);
    .remSizeiPad(@property; @iPadSizeValue; @sizeValue);
    .remSizeiPhone(@property; @iPhoneSizeValue; @sizeValue);
}

// REM based sizing. Based on http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/ 
.remSize(@property; @sizeValue; @iPadSizeValue: @sizeValue; @iPhoneSizeValue: @sizeValue) {
    
    .remSizeStandard(@property; @sizeValue);
    .remSizeiPad(@property; @iPadSizeValue; @sizeValue);
    .remSizeiPhone(@property; @iPhoneSizeValue; @sizeValue);
}

.remSizeStandard(@property; @sizeValue) when (isnumber(@sizeValue)) and (get-unit(@sizeValue) = ~'') {
    @pxValue: round((@sizeValue * unit(@fontSizeStandard)));
    @{property}: ~"@{pxValue}px";
    @{property}: ~"@{sizeValue}rem"; 
}

.remSizeStandard(@property; @sizeValue) when (default()) {
    @{property}: @sizeValue;
}

.remSizeiPad(@property; @iPadSizeValue; @baseSize) when (isnumber(@iPadSizeValue)) and (get-unit(@iPadSizeValue) = ~'') {
    .iPadMQ({
        @pxValue: round((@iPadSizeValue * unit(@fontSizeSmaller)));
        @{property}: ~"@{pxValue}px"; 
        @{property}: ~"@{iPadSizeValue}rem";
    });
}

.remSizeiPad(@property; @iPadSizeValue; @baseSize) when (default()) and not (@iPadSizeValue = @baseSize) {
    .iPadMQ({
        @{property}: @iPadSizeValue;
    });
}

.remSizeiPhone(@property; @iPhoneSizeValue; @baseSize) when (isnumber(@iPhoneSizeValue)) and (get-unit(@iPhoneSizeValue) = ~'') {
    .iPhoneMQ({
        @pxValue: round((@iPhoneSizeValue * unit(@fontSizeSmallest)));
        @{property}: ~"@{pxValue}px"; 
        @{property}: ~"@{iPhoneSizeValue}rem";
    });
}

.remSizeiPhone(@property; @iPhoneSizeValue; @baseSize) when (default()) and not (@iPhoneSizeValue = @baseSize) {
    .iPhoneMQ({
        @{property}: @iPhoneSizeValue;
    });
}

.liImage(@image, @size: 16px) {
    list-style: none;
    background-image: @image;
    background-size: @size; 
    background-repeat: no-repeat;
    background-position: 0px (@size / 4); 
    padding-left: (@size + (@size / 4)); 
}

.sitePadding() {
	padding: @verticalSpacing @horizontalSpacing;
	
	.iPhoneMQ({
	    padding: @verticalSpacing;
	});
}

.siteLeftPadding() {
	padding-left: @horizontalSpacing;
    .iPhoneMQ({
	    padding-left: 0;
	});
}

.siteRightPadding() {
	padding-right: @horizontalSpacing;
    .iPhoneMQ({
	    padding-right: 0;
	});
}

.siteLeftMargin() {
	margin-left: @horizontalSpacing;
    
    .iPhoneMQ({
	    margin-left: 0px;
	});
}

.siteRightMargin() {
	margin-right: @horizontalSpacing;
	
	.iPhoneMQ({
	    margin-right: 0px;
	});
}    

.clear {
    clear: both;
}