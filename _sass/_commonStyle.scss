// Common style information between print and screen


// Media query values ************************/
$mqiPhone: "only screen and (max-device-width: 640px), only screen and (max-device-width: 568px), only screen and (max-device-width: 540px), only screen and (max-device-width: 320px)";
$mqHandheld: "only screen and (max-width: 640px), only screen and (max-width: 568px), only screen and (max-width: 540px), only screen and (max-width: 320px)";
 
$mqiPad: "only screen and (min-device-width : 768px) and (max-device-width : 1024px) ";
$mqTablet: "only screen and (min-width : 768px) and (max-width : 1024px) ";
//Retina add rule and (-webkit-min-device-pixel-ratio: 2)
//Non-Retina add rule and (-webkit-min-device-pixel-ratio: 1)

//
// Variables 
//
$dividerColour: #5D83C4;

$headerBackground: #212121; 
$headerFontColour: #DDDDDD;
$headerLinkHoverColour: #5D83C4;

$mainHeaderColour: #475261;
$mainFontColour: #333333;

$backgroundColour: $headerBackground;
$contentBackgroundColour: #FFFFFF;

$mainFontPrintColour: #000000;

$mainHeaderLeftGradient: #5D83C4;

$headerHeight: 6em;


$lineHeight: 1.5;
$lineHeightEM: #{$lineHeight}em;

$linkColour: $mainFontColour;
$linkHoverColour: $dividerColour;

$widthStandard: 60%;
$widthSmaller: 80%;
$widthSmallest: 100%;


$titleFonts: 'League Gothic', 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$titlePrintFonts: Helvetica;
$titleFontWeight: normal;
$titlePrintFontWeight: normal;
$headerFonts: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$headerPrintFonts: $titlePrintFonts;
$headerFontWeight: 700;
$headerPrintFontWeight: bold;
$contentFonts: $headerFonts;
$contentPrintFonts: $titlePrintFonts;
$contentFontWeight: 300;
$contentPrintFontWeight: normal;

$categoryTagColour: #E82C0C;
$tagColour: #0089e0;

$fontSizeTitle: 6em;
$fontSizeTitleMobile: 5em;
$fontSizeStandard: 18px;
$fontSizeSmaller: 16px;
$fontSizeSmallest: 14px;

$fontSizeTitlePrint: 32pt;
$fontSizeLargePrint: 16pt;
$fontSizeStandardPrint: 12pt;

$widthStandard: 60%;
$widthSmaller: 80%;
$widthSmallest: 100%;

$verticalSpacing: 1em;
$horizontalSpacing: 2em;

///////////////////
// Common Mixins //
///////////////////

@mixin fonts() {
    /* Font Definitions */
    @import url(http://fonts.googleapis.com/css?family=Open+Sans:300,700);
    
    $lg-font-path: '/assets/fonts/league-gothic';
    @font-face {
        font-family: 'League Gothic';
        src: url("#{$lg-font-path}/leaguegothic-condensed-regular-webfont.eot");
        src: local('â˜º'), url("#{$lg-font-path}/leaguegothic-condensed-regular-webfont.woff") format('woff'), url("#{$lg-font-path}/leaguegothic-condensed-regular-webfont.ttf") format('truetype'), url("#{$lg-font-path}/leaguegothic-condensed-regular-webfont.svg") format('svg');
        font-weight: normal;
        font-style: normal;
    }
}

// Extra small devices (portrait phones, less than 576px)
@mixin for-xs-only {
    @media (max-width: 575px) {
        @content;
    }
}

// Small devices (landscape phones, 576px and up)
@mixin for-sm-up {
    @media (min-width: 576px) { 
        @content;
    }    
}

// Medium devices (tablets, 768px and up)
@mixin for-md-up {
    @media (min-width: 768px) { 
        @content;
    }
}

// Large devices (desktops, 992px and up)
@mixin for-lg-up {
    @media (min-width: 992px) { 
        @content;
    }
}

// Extra large devices (large desktops, 1200px and up)
@mixin for-xl-up {
    @media (min-width: 1200px) {
        @content;
    }
}

// Only for printing
@mixin for-print-only {
    @media only print { 
        @content;
    }
}

//Function just for doing mobile sizing. If number and no unit, remsize. otherwise use supplied value
@mixin mobileSize($property, $sizeValue, $iPadSizeValue: $sizeValue, $iPhoneSizeValue: $sizeValue) {
    
    @include remSize($property, $sizeValue, $fontSizeStandard);
    
    @if $iPadSizeValue != $sizeValue {
        @include respond-to(tablets) {
            @include remSize($property, $iPadSizeValue, $fontSizeSmaller);
        }
    }

    @if $iPhoneSizeValue != $sizeValue {
        @include respond-to(handhelds) {
            @include remSize($property, $iPhoneSizeValue, $fontSizeSmallest);
        }
    }
}

@mixin remSize($property, $sizeValue, $pxFontSize: $fontSizeStandard) {
    
    @if isnumber($sizeValue) and unitless($sizeValue) {    
        $pxValue: round(($sizeValue * $pxFontSize));
        @if unitless($pxValue) {       
            #{$property}: #{$pxValue}px;
        } @else {
            #{$property}: #{$pxValue};
        }
        #{$property}: #{$sizeValue}rem; 
    } @else {
        #{$property}: $sizeValue;
    }
}

@mixin respond-to($media) {
    
    @if $media == handhelds {
        @media #{$mqiPhone}, #{$mqHandheld} {
            @content;
        }
    } @else if $media == tablets {
        @media #{$mqiPad},#{$mqTablet} { 
            @content;
        }
    } @else if $media == print {
        @media only print { 
            @content;
        }
    } @else {
        // Standard screen
        @content;
    }
        
}

@mixin sitePadding() {
    padding: $verticalSpacing;
    
    @include for-md-up {
        padding: $verticalSpacing $horizontalSpacing;
    }
}

@mixin clear {
    clear: both;
}